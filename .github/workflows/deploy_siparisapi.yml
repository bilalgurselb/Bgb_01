name: Build & Deploy SiparisApi to Azure App Service

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_VERSION: "9.0.x"
  PROJECT_PATH: "SiparisApi/SiparisApi.csproj"
  PUBLISH_DIR: "publish"

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      # 🧭 Repo çek
      - name: Checkout repository
        uses: actions/checkout@v4

      # ⚙️ .NET ortamını kur
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 📦 Bağımlılıkları yükle
      - name: Restore dependencies
        run: dotnet restore "${{ env.PROJECT_PATH }}"

      # 🏗️ Derleme (Release)
      - name: Build in Release mode
        run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release --no-restore

      # 🚀 Yayın klasörünü oluştur
      - name: Publish Web API
        working-directory: ./SiparisApi
        run: >
          dotnet publish "SiparisApi.csproj"
          --configuration Release
          --no-build
          --self-contained false
          --output "../publish"

      # 🧹 Eski wwwroot kalıntılarını temizle (Doğru konumda!)
      - name: Remove nested wwwroot if exists
        shell: pwsh
        working-directory: ./publish
        run: |
          $nested = Join-Path (Get-Location) "wwwroot\\wwwroot"
          if (Test-Path $nested) {
              Write-Host "Removing nested wwwroot..."
              Remove-Item -Recurse -Force $nested
          }

      # ☁️ Azure App Service’e yükle
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: "bilalgurseliparis"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: ${{ env.PUBLISH_DIR }}

      # 🌡️ Free plan için warm-up isteği (SQL uyanması)
            - name: Warm-up Azure Web App
        shell: pwsh
        run: |
          try {
            $response = Invoke-WebRequest -Uri "https://bilalgurseliparis-eyehgshwhfg4a7ew.northeurope-01.azurewebsites.net/Account/Login" -UseBasicParsing -TimeoutSec 15
            Write-Host "Warm-up completed with status code $($response.StatusCode)"
          } catch {
            Write-Host "Warm-up skipped or failed."
          }
